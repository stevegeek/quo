# Generated from lib/quo/composed_query.rb with RBS::Inline

module Quo
  module ComposedQuery
    # @rbs override
    def query: ...

    # @rbs override
    def inspect: ...

    private

    # @rbs return: Hash[Symbol, untyped]
    def child_options: (untyped query_class) -> Hash[Symbol, untyped]

    # @rbs return: Array[Symbol]
    def property_names: (untyped query_class) -> Array[Symbol]

    # @rbs return: Quo::Query | ::ActiveRecord::Relation
    def left: () -> (Quo::Query | ::ActiveRecord::Relation)

    # @rbs return: Quo::Query | ::ActiveRecord::Relation
    def right: () -> (Quo::Query | ::ActiveRecord::Relation)

    # @rbs return: ActiveRecord::Relation | CollectionBackedQuery
    def merge_left_and_right: () -> (ActiveRecord::Relation | CollectionBackedQuery)

    # @rbs left_rel: ActiveRecord::Relation
    # @rbs right_rel: ActiveRecord::Relation
    # @rbs return: ActiveRecord::Relation
    def merge_active_record_relations: (ActiveRecord::Relation left_rel, ActiveRecord::Relation right_rel) -> ActiveRecord::Relation

    # @rbs rel: untyped
    # @rbs return: bool
    def is_relation?: (untyped rel) -> bool

    # @rbs left: untyped
    # @rbs right: untyped
    # @rbs return: bool
    def both_relations?: (untyped left, untyped right) -> bool

    # @rbs left: untyped
    # @rbs right: untyped
    # @rbs return: bool
    def left_relation_right_enumerable?: (untyped left, untyped right) -> bool

    # @rbs left: untyped
    # @rbs right: untyped
    # @rbs return: bool
    def left_enumerable_right_relation?: (untyped left, untyped right) -> bool
  end
end
