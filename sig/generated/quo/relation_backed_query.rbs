# Generated from lib/quo/relation_backed_query.rb with RBS::Inline

module Quo
  class RelationBackedQuery < Query
    # @rbs query: ActiveRecord::Relation | Quo::Query
    # @rbs props: Hash[Symbol, untyped]
    # @rbs &block: () -> ActiveRecord::Relation | Quo::Query | Object & Enumerable[untyped]
    # @rbs return: Quo::RelationBackedQuery
    def self.wrap: (?ActiveRecord::Relation | Quo::Query query, ?props: Hash[Symbol, untyped]) ?{ (?) -> untyped } -> Quo::RelationBackedQuery

    # @rbs conditions: untyped?
    # @rbs return: String
    def self.sanitize_sql_for_conditions: (untyped? conditions) -> String

    # @rbs string: String
    # @rbs return: String
    def self.sanitize_sql_string: (String string) -> String

    # @rbs value: untyped
    # @rbs return: String
    def self.sanitize_sql_parameter: (untyped value) -> String

    @_specification: Quo::RelationBackedQuerySpecification?

    # Apply a query specification to this query
    # @rbs specification: Quo::RelationBackedQuerySpecification
    # @rbs return: Quo::Query
    def with_specification: (Quo::RelationBackedQuerySpecification specification) -> Quo::Query

    # Apply query options using the specification
    # @rbs options: Hash[Symbol, untyped]
    # @rbs return: Quo::Query
    def with: (?Hash[Symbol, untyped] options) -> Quo::Query

    # @rbs return: Quo::CollectionBackedQuery
    def to_collection: (?total_count: untyped) -> Quo::CollectionBackedQuery

    def results: () -> Quo::Results

    # Return the SQL string for this query if its a relation type query object
    def to_sql: () -> String

    # Implements a fluent API for query methods
    # This allows methods to be chained like query.where(...).order(...).limit(...)
    # @rbs method_name: Symbol
    # @rbs *args: untyped
    # @rbs **kwargs: untyped
    # @rbs &block: untyped
    # @rbs return: Quo::Query
    def method_missing: (Symbol method_name, *untyped args, **untyped kwargs) ?{ (?) -> untyped } -> Quo::Query

    # @rbs method_name: Symbol
    # @rbs include_private: bool
    # @rbs return: bool
    def respond_to_missing?: (Symbol method_name, ?bool include_private) -> bool

    private

    def validated_query: () -> untyped

    # The underlying query is essentially the configured query with optional extras setup
    def underlying_query: () -> ActiveRecord::Relation

    # The configured query is the underlying query with paging
    def configured_query: () -> ActiveRecord::Relation
  end
end
