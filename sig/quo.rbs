module ActiveRecord
  module Associations
    class Preloader
      def initialize: (records: untyped, associations: untyped, ?scope: untyped, ?available_records: Array[untyped], ?associate_by_default: bool) -> void
    end
  end
end

module Quo
  VERSION: String

  type query = Quo::Query
  type queryOrRel = query | ActiveRecord::Relation
  type enumerable = Object & Enumerable[untyped]
  type relOrEnumerable = ActiveRecord::Relation | enumerable
  type loadedQueryOrEnumerable = LoadedQuery | EagerQuery | enumerable
  type composable = query | relOrEnumerable

  # TODO: how can we do the known options, eg `page` and then allow anything else?
  # Maybe we should separate out the known options from the unknown options
  type queryOptions = Hash[Symbol, untyped]

  interface _Logger
    def info: (String) -> void
    def error: (String) -> void
    def debug: (String) -> void
  end
end
