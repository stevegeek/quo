module Quo
  VERSION: String

  type query = Quo::Query
  type merge_composable = query | ActiveRecord::Relation
  # FIXME: anything that is Enumerable should be composable, but I don't know how to express that
  type enumerable = Array[untyped] | Set[untyped]
  type query_like = ActiveRecord::Relation | enumerable
  type composable = query | query_like

  interface _Logger
    def info: (String) -> void
    def error: (String) -> void
    def debug: (String) -> void
  end

  class Configuration
    attr_accessor formatted_query_log: bool?
    attr_accessor query_show_callstack_size: Integer?
    attr_accessor logger: _Logger?

    def initialize: () -> void
  end
  attr_reader self.configuration: Configuration

  def self.configure: () { (Configuration config) -> void } -> void
end
