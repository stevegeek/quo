module Quo
  class Query
    include Quo::Utilities::Callstack
    extend Quo::Utilities::Compose
    extend Quo::Utilities::Sanitize
    extend Quo::Utilities::Wrap

    def self.call: (**untyped options) -> untyped
    def self.call!: (**untyped options) -> untyped

    @scope: ActiveRecord::Relation | nil

    attr_reader current_page: (Integer | nil)
    attr_reader page_size: (Integer | nil)
    attr_reader options: Hash[untyped, untyped]

    def initialize: (**untyped options) -> void
    def query: () -> composable
    def compose: (composable right, ?joins: untyped?) -> Quo::MergedQuery
    alias + compose

    def copy: (**untyped options) -> query

    def limit: (untyped limit) -> query
    def order: (untyped options) -> query
    def group: (*untyped options) -> query
    def includes: (*untyped options) -> query
    def preload: (*untyped options) -> query
    def select: (*untyped options) -> query

    def sum: (?untyped column_name) -> Numeric
    def average: (untyped column_name) -> Numeric
    def minimum: (untyped column_name) -> Numeric
    def maximum: (untyped column_name) -> Numeric
    def count: () -> Integer

    alias total_count count

    alias size count
    def page_count: () -> Integer
    def first: (*untyped args) -> untyped
    def first!: (*untyped args) -> untyped
    def last: (*untyped args) -> untyped
    def to_a: () -> Array[untyped]
    def to_eager: (?::Hash[untyped, untyped] more_opts) -> Quo::EagerQuery
    alias load to_eager
    def enumerator: () -> Quo::Enumerator

    # Set a block used to transform data after query fetching
    def transform: () ?{ () -> untyped } -> self

    def exists?: () -> bool
    def none?: () -> bool
    alias empty? none?
    def relation?: () -> bool
    def eager?: () -> bool
    def paged?: () -> bool

    def model: () -> (untyped | nil)
    def klass: () -> (untyped | nil)

    def transform?: () -> bool
    def to_sql: () -> (String | nil)
    def unwrap: () -> query_like

    private

    def formatted_queries?: () -> bool
    def trim_query: (String sql) -> String
    def format_query: (String sql_str) -> String
    def transformer: () -> (nil | ^(untyped) -> untyped)
    def offset: () -> Integer
    def configured_query: () -> ActiveRecord::Relation
    def sanitised_page_size: () -> Integer
    def query_with_logging: () -> ActiveRecord::Relation
    def underlying_query: () -> ActiveRecord::Relation
    def unwrap_relation: (composable query) -> ActiveRecord::Relation
    def test_eager: (composable rel) -> bool
    def test_relation: (composable rel) -> bool
  end
end
