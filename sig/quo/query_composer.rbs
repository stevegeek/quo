module Quo
  class QueryComposer
    @left_relation: bool
    @right_relation: bool

    def initialize: (composable left, composable right, ?untyped? joins) -> void
    def compose: () -> Quo::MergedQuery

    private

    attr_reader left: composable
    attr_reader right: composable
    attr_reader joins: untyped

    attr_reader unwrapped_left: relOrEnumerable
    attr_reader unwrapped_right: relOrEnumerable

    def left_relation?: -> bool

    def merge_left_and_right: () -> relOrEnumerable
    def merged_options: () -> ::Hash[untyped, untyped]

    def right_relation?: -> bool

    def unwrap_relation: (composable) -> relOrEnumerable
    def relation_type?: (relOrEnumerable) -> bool
    def apply_joins: (ActiveRecord::Relation left_rel, untyped joins) -> ActiveRecord::Relation
    def both_relations?: () -> bool
    def left_relation_right_enumerable?: () -> bool
    def left_enumerable_right_relation?: () -> bool
  end
end
