module Quo
  class Results
    extend Forwardable

    include Quo::Utilities::Callstack

    def initialize: (Quo::Query query, ?transformer: (^(untyped, ?Integer) -> untyped)?) -> void

    @query: Quo::Query

    def group_by: -> Hash[untyped, Array[untyped]]

    def respond_to_missing?: (Symbol name, ?bool include_private) -> bool

    private

    attr_reader transformer: (^(untyped, ?Integer) -> untyped)?
    attr_reader unwrapped: relOrEnumerable

    def transform_results: (untyped) -> untyped
  end
end
